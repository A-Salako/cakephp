<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.9.0@8b9ad1eb9e8b7d3101f949291da2b9f7767cd163">
  <file src="src/Cache/Engine/RedisEngine.php">
    <InvalidReturnStatement occurrences="4">
      <code>$this-&gt;_Redis-&gt;set($key, $value)</code>
      <code>$this-&gt;_Redis-&gt;setEx($key, $duration, $value)</code>
      <code>$value</code>
      <code>$value</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="3">
      <code>bool</code>
      <code>int|false</code>
      <code>int|false</code>
    </InvalidReturnType>
    <PossiblyInvalidArgument occurrences="1">
      <code>$value</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Collection/CollectionTrait.php">
    <InvalidArrayOffset>
      <code>$collectionArraysCounts[$changeIndex]</code>
      <code>$value[$keys[$index]]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Collection/Iterator/ZipIterator.php">
    <MissingTemplateParam>
      <code>ZipIterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Controller/Component/RequestHandlerComponent.php">
    <RedundantCondition>
      <code>is_string($type)</code>
    </RedundantCondition>
  </file>
  <file src="src/Database/Expression/QueryExpression.php">
    <RedundantCondition>
      <code>$typeMultiple</code>
    </RedundantCondition>
  </file>
  <file src="src/Database/Query.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Database/Statement/PDOStatement.php">
    <RedundantCondition>
      <code><![CDATA[$property === 'queryString' && isset($this->_statement->queryString)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Error/Renderer/ConsoleExceptionRenderer.php">
    <InvalidArrayOffset>
      <code>$exceptions[$i - 1]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/I18n/Date.php">
    <DeprecatedClass occurrences="2">
      <code>MutableDate</code>
      <code>parent::__construct($time, $tz)</code>
    </DeprecatedClass>
  </file>
  <file src="src/I18n/DateFormatTrait.php">
    <RedundantCondition>
      <code>$time !== false</code>
    </RedundantCondition>
  </file>
  <file src="src/ORM/SaveOptionsBuilder.php">
    <MissingTemplateParam>
    <DeprecatedClass occurrences="5">
      <code>$time-&gt;setTimezone($timezone)</code>
      <code>Time::UNIX_TIMESTAMP_FORMAT</code>
      <code>static|null</code>
      <code>static|null</code>
      <code>static|null</code>
    </DeprecatedClass>
    <MissingParamType occurrences="1">
      <code>$format</code>
    </MissingParamType>
  </file>
  <file src="src/I18n/Time.php">
    <DeprecatedClass occurrences="2">
      <code>MutableDateTime</code>
      <code>parent::__construct($time, $tz)</code>
    </DeprecatedClass>
  </file>
  <file src="src/I18n/functions.php">
    <InternalMethod occurrences="8">
      <code>translate</code>
      <code>translate</code>
      <code>translate</code>
      <code>translate</code>
      <code>translate</code>
      <code>translate</code>
      <code>translate</code>
      <code>translate</code>
    </InternalMethod>
  </file>
  <file src="src/Log/Engine/ArrayLog.php">
    <DeprecatedMethod occurrences="1">
      <code>_format</code>
    </DeprecatedMethod>
  </file>
  <file src="src/Log/Engine/ConsoleLog.php">
    <DeprecatedMethod occurrences="1">
      <code>_format</code>
    </DeprecatedMethod>
  </file>
  <file src="src/Log/Engine/FileLog.php">
    <DeprecatedMethod occurrences="1">
      <code>_format</code>
    </DeprecatedMethod>
  </file>
  <file src="src/Log/Engine/SyslogLog.php">
    <DeprecatedMethod occurrences="1">
      <code>_format</code>
    </DeprecatedMethod>
  </file>
  <file src="src/Mailer/Mailer.php">
    <DeprecatedProperty occurrences="1">
      <code>$this-&gt;modelClass</code>
    </DeprecatedProperty>
    <DeprecatedTrait occurrences="1">
      <code>ModelAwareTrait</code>
    </DeprecatedTrait>
  </file>
  <file src="src/Mailer/Transport/SmtpTransport.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$this-&gt;_content</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>array{headers: string, message: string}</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/ORM/Locator/LocatorAwareTrait.php">
    <DeprecatedClass occurrences="1">
      <code>$this</code>
    </DeprecatedClass>
  </file>
  <file src="src/ORM/Locator/TableLocator.php">
    <NonInvariantDocblockPropertyType occurrences="1">
      <code>$instances</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/ORM/Query.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$this-&gt;_repository</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/ORM/Table.php">
    <DeprecatedClass occurrences="6">
  </file>
  <file src="src/Shell/Helper/TableHelper.php">
    <InvalidCast>
      <code>$v</code>
    </InvalidCast>
  </file>
  <file src="src/TestSuite/Constraint/EventFired.php">
    <InternalClass>
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
    </InternalClass>
    <InternalMethod>
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/EventFiredWith.php">
    <InternalClass>
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event "%s" was fired %d times, cannot make data assertion',
                $other,
                count($events)
            ))]]></code>
    </InternalClass>
    <InternalMethod>
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event "%s" was fired %d times, cannot make data assertion',
                $other,
                count($events)
            ))]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/Response/ResponseBase.php">
    <InternalClass>
      <code>new AssertionFailedError('No response set, cannot assert content.')</code>
    </InternalClass>
    <InternalMethod>
      <code>new AssertionFailedError('No response set, cannot assert content.')</code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/Session/FlashParamEquals.php">
    <InternalClass>
      <code>new AssertionFailedError($message)</code>
    </InternalClass>
    <InternalMethod>
      <code>new AssertionFailedError($message)</code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Fixture/TestFixture.php">
    <InvalidArrayOffset>
      <code>$types[$field]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/TestSuite/TestSuite.php">
    <InternalClass>
      <code>BaseTestSuite</code>
    </InternalClass>
    <InternalMethod>
      <code>addTestFile</code>
      <code>addTestFile</code>
    </InternalMethod>
  </file>
  <file src="src/Utility/Hash.php">
    <RedundantCondition>
      <code>is_array($_list)</code>
    </RedundantCondition>
  </file>
  <file src="src/Utility/Text.php">
    <RedundantCast>
      <code>(string)mb_internal_encoding()</code>
    </RedundantCast>
  </file>
  <file src="src/Utility/Xml.php">
    <TypeDoesNotContainType>
      <code>!is_array($data)</code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/View/Exception/MissingCellTemplateException.php">
    <ImplementedReturnTypeMismatch>
      <code><![CDATA[array{name: string, file: string, paths: array<string>}]]></code>
    </ImplementedReturnTypeMismatch>
  </file>
  <file src="src/View/View.php">
    <InvalidReturnStatement>
      <code>$config</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>array{key:string, config:string}</code>
    </InvalidReturnType>
  </file>
  <file src="src/View/XmlView.php">
    <InvalidReturnStatement>
      <code><![CDATA[Xml::fromArray($data, $options)->saveXML()]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>string</code>
    </InvalidReturnType>
  </file>
</files>
